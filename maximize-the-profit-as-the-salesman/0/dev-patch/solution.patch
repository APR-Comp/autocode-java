--- maximize-the-profit-as-the-salesman/0/src/main/java/com/aprcomp/Solution.java	2023-12-06 21:17:30.556145636 +0200
+++ maximize-the-profit-as-the-salesman/0/../reference.java	2023-12-21 08:02:04.763626282 +0200
@@ -1,76 +1,22 @@
 package com.aprcomp;
 import java.util.*;
-/**java 
- You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.
-Additionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that i ** th buyer wants to buy all the houses from starti to endi for goldi amount of gold.
-As a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.
-Return the maximum amount of gold you can earn.
-Note that different buyers can't buy the same house, and some houses may remain unsold.
- 
-Example 1:
 
-Input: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]
-Output: 3
-Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.
-We sell houses in the range [0,0] to 1 ** st buyer for 1 gold and houses in the range [1,3] to 3 ** rd buyer for 2 golds.
-It can be proven that 3 is the maximum amount of gold we can achieve.
-
-Example 2:
-
-Input: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]
-Output: 10
-Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.
-We sell houses in the range [0,2] to 2 ** nd buyer for 10 golds.
-It can be proven that 10 is the maximum amount of gold we can achieve.
-
- 
-Constraints:
-
-1 <= n <= 10 ** 5
-1 <= offers.length <= 10 ** 5
-offers[i].length == 3
-0 <= starti <= endi <= n - 1
-1 <= goldi <= 10 ** 3
-
- **/
-class Solution {
+public class Solution {
     public int maximizeTheProfit(int n, List<List<Integer>> offers) {
-        // Sorting by end which will help to find maximum profit upto ith house
-        Collections.sort(offers, (a,b)->(a.get(1)-b.get(1)));
-        
-        // dp[i] represents maximum profit upto ith house
-        int[] dp = new int[n+1];
-        
-        // last index to access in binary search
-        int lastIndex = 0;
-
-        for(int i=1; i<=n; i++) {
-            // check if this house is not in offer then previous house profit is answer
-            if(lastIndex < offers.size() && offers.get(lastIndex).get(1) < i) {
-                dp[i] = dp[i-1];
-            }
-
-            // check all offers ending at house 'i'
-            while(lastIndex < offers.size() && offers.get(lastIndex).get(1) == i) {
-                // if start house is '0' then profit is current offer's gold
-                if(offers.get(lastIndex).get(0) == 0) {
-                    dp[i] = Math.max(dp[i], offers.get(lastIndex).get(2));
-                } else {
-                    // if start house is 'j' then profit is maximum profit upto 'j-1' houses + current offer's gold
-                    dp[i] = Math.max(dp[i], dp[offers.get(lastIndex).get(0)-1] + offers.get(lastIndex).get(2));
-                }
-
-                // checking next offer
-                lastIndex++;
-            }
-
-            // keep the maximum profit found upto 'i' houses
-            if(i > 0) {
-                dp[i] = Math.max(dp[i], dp[i-1]);
+        int[] dp = new int[n + 1];
+        List<List<List<Integer>>> m = new ArrayList<>();
+        for (int i = 0; i < n; i++) {
+            m.add(new ArrayList<List<Integer>>());
+        }
+        for (List<Integer> a : offers) {
+            m.get(a.get(1)).add(a);
+        }
+        for (int e = 1; e <= n; e++) {
+            dp[e] = dp[e - 1];
+            for (List<Integer> a : m.get(e - 1)) {
+                dp[e] = Math.max(dp[e], dp[a.get(0)] + a.get(2));
             }
         }
-
-        // maximum profit upto 'n' houses is our answer
         return dp[n];
     }
-}
\ No newline at end of file
+}
