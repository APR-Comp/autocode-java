--- maximize-the-profit-as-the-salesman/4/src/main/java/com/aprcomp/Solution.java	2023-12-06 21:17:30.589479291 +0200
+++ maximize-the-profit-as-the-salesman/4/../reference.java	2023-12-21 08:02:04.763626282 +0200
@@ -1,73 +1,22 @@
 package com.aprcomp;
 import java.util.*;
-/**java 
- You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.
-Additionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that i ** th buyer wants to buy all the houses from starti to endi for goldi amount of gold.
-As a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.
-Return the maximum amount of gold you can earn.
-Note that different buyers can't buy the same house, and some houses may remain unsold.
- 
-Example 1:
 
-Input: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]
-Output: 3
-Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.
-We sell houses in the range [0,0] to 1 ** st buyer for 1 gold and houses in the range [1,3] to 3 ** rd buyer for 2 golds.
-It can be proven that 3 is the maximum amount of gold we can achieve.
-
-Example 2:
-
-Input: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]
-Output: 10
-Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.
-We sell houses in the range [0,2] to 2 ** nd buyer for 10 golds.
-It can be proven that 10 is the maximum amount of gold we can achieve.
-
- 
-Constraints:
-
-1 <= n <= 10 ** 5
-1 <= offers.length <= 10 ** 5
-offers[i].length == 3
-0 <= starti <= endi <= n - 1
-1 <= goldi <= 10 ** 3
-
- **/
-class Solution {
+public class Solution {
     public int maximizeTheProfit(int n, List<List<Integer>> offers) {
-        // Sort the offers by end time.
-        Collections.sort(offers, (a, b) -> a.get(1) - b.get(1));
-
-        // Create an array to keep track of the maximum profit at each point in time.
         int[] dp = new int[n + 1];
-
-        // Index for iterating through the offers.
-        int offerIdx = 0;
-
-        // Iterate over each point in time.
-        for (int i = 1; i <= n; i++) {
-            // Continue to next offer if current offer ends after this point in time.
-            while (offerIdx < offers.size() && offers.get(offerIdx).get(1) < i) {
-                offerIdx++;
-            }
-
-            // If there are no more offers, the maximum profit is the same as the previous point in time.
-            if (offerIdx == offers.size()) {
-                dp[i] = dp[i - 1];
-                continue;
-            }
-
-            // Calculate the profit if we accept the current offer.
-            int profitWithCurrentOffer = offers.get(offerIdx).get(2);
-            if (offers.get(offerIdx).get(0) > 0) {
-                profitWithCurrentOffer += dp[offers.get(offerIdx).get(0) - 1];
+        List<List<List<Integer>>> m = new ArrayList<>();
+        for (int i = 0; i < n; i++) {
+            m.add(new ArrayList<List<Integer>>());
+        }
+        for (List<Integer> a : offers) {
+            m.get(a.get(1)).add(a);
+        }
+        for (int e = 1; e <= n; e++) {
+            dp[e] = dp[e - 1];
+            for (List<Integer> a : m.get(e - 1)) {
+                dp[e] = Math.max(dp[e], dp[a.get(0)] + a.get(2));
             }
-
-            // The maximum profit is the maximum of the profit with the current offer and the profit without the current offer.
-            dp[i] = Math.max(profitWithCurrentOffer, dp[i - 1]);
         }
-
-        // Return the maximum profit.
         return dp[n];
     }
-}
\ No newline at end of file
+}
