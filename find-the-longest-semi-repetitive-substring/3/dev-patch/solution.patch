--- find-the-longest-semi-repetitive-substring/3/src/main/java/com/aprcomp/Solution.java	2023-12-06 21:17:30.412810922 +0200
+++ find-the-longest-semi-repetitive-substring/3/../reference.java	2023-12-21 08:01:46.990153784 +0200
@@ -1,67 +1,15 @@
 package com.aprcomp;
 import java.util.*;
-/**java 
- You are given a 0-indexed string s that consists of digits from 0 to 9.
-A string t is called a semi-repetitive if there is at most one consecutive pair of the same digits inside t. For example, 0010, 002020, 0123, 2002, and 54944 are semi-repetitive while 00101022, and 1101234883 are not.
-Return the length of the longest semi-repetitive substring inside s.
-A substring is a contiguous non-empty sequence of characters within a string.
- 
-Example 1:
 
-Input: s = "52233"
-Output: 4
-Explanation: The longest semi-repetitive substring is "5223", which starts at i = 0 and ends at j = 3. 
-
-Example 2:
-
-Input: s = "5494"
-Output: 4
-Explanation: s is a semi-reptitive string, so the answer is 4.
-
-Example 3:
-
-Input: s = "1111111"
-Output: 2
-Explanation: The longest semi-repetitive substring is "11", which starts at i = 0 and ends at j = 1.
-
- 
-Constraints:
-
-1 <= s.length <= 50
-'0' <= s[i] <= '9'
-
- **/
-class Solution {
+public class Solution {
     public int longestSemiRepetitiveSubstring(String s) {
-                                   int n = s.length();
-                                   int[][] dp = new int[n][n];
-                                   int lo = 0, hi = 0;
-                                   for (int i = n - 1; i >= 0; i--) {
-                                       for (int j = i; j < n; j++) {
-                                           // case1: there is only one character in the window, then if repeated, then length is 1,
-                                           // else length is zero
-                                           if (i == j) {
-                                               if (s.charAt(i) == s.charAt(j)) { dp[i][j] = 1; }
-                                               else { dp[i][j] = 0; }
-                                           } else {
-                                               // case2: there are at least two characters in the window,
-                                               // then if the substring is repeated, the length is j - i + 1
-                                               if (s.charAt(i) == s.charAt(j)) { dp[i][j] = j - i + 1; }
-                                               // case3: if the substring is not repeated,
-                                               // then the longest repeated substring must have len j - k + 1, i.e. dp[i][k], since i < k
-                                               else {
-                                                   dp[i][j] = 0;
-                                                   for (int k = i; k < j; k++) {
-                                                       dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k + 1][j]);
-                                                   }
-                                               }
-                                           }
-                                       }
-                                   }
-                                   int max = 0;
-                                   for (int i = 0; i < n; i++) {
-                                       max = Math.max(max, dp[i][n - 1]);
-                                   }
-                                   return max;
-                               }
-                           }
\ No newline at end of file
+        int i = 0, cur = 0, n = s.length();
+        for (int j = 1; j < n; ++j) {
+            cur += s.charAt(j) == s.charAt(j - 1) ? 1 : 0;
+            if (cur > 1) {
+                cur -= s.charAt(++i) == s.charAt(i - 1) ? 1 : 0;
+            }
+        }
+        return n - i;
+    }
+}
