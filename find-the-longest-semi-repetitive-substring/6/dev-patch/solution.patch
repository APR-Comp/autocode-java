--- find-the-longest-semi-repetitive-substring/6/src/main/java/com/aprcomp/Solution.java	2023-12-06 21:17:30.432811115 +0200
+++ find-the-longest-semi-repetitive-substring/6/../reference.java	2023-12-21 08:01:46.990153784 +0200
@@ -1,69 +1,15 @@
 package com.aprcomp;
 import java.util.*;
-/**java 
- You are given a 0-indexed string s that consists of digits from 0 to 9.
-A string t is called a semi-repetitive if there is at most one consecutive pair of the same digits inside t. For example, 0010, 002020, 0123, 2002, and 54944 are semi-repetitive while 00101022, and 1101234883 are not.
-Return the length of the longest semi-repetitive substring inside s.
-A substring is a contiguous non-empty sequence of characters within a string.
- 
-Example 1:
 
-Input: s = "52233"
-Output: 4
-Explanation: The longest semi-repetitive substring is "5223", which starts at i = 0 and ends at j = 3. 
-
-Example 2:
-
-Input: s = "5494"
-Output: 4
-Explanation: s is a semi-reptitive string, so the answer is 4.
-
-Example 3:
-
-Input: s = "1111111"
-Output: 2
-Explanation: The longest semi-repetitive substring is "11", which starts at i = 0 and ends at j = 1.
-
- 
-Constraints:
-
-1 <= s.length <= 50
-'0' <= s[i] <= '9'
-
- **/
-class Solution {
+public class Solution {
     public int longestSemiRepetitiveSubstring(String s) {
-        // Initialize the variables
-        int maxLength = 0;
-        int currentLength = 0;
-        char prevChar = '\0';
-        int consecutiveCount = 0;
-        
-        // Iterate over the characters in the string
-        for (char c : s.toCharArray()) {
-            // If the current character is different from the previous character,
-            // update the variables accordingly
-            if (c != prevChar) {
-                prevChar = c;
-                currentLength = 1;
-                consecutiveCount = 0;
-            } else {
-                // If the current character is the same as the previous character,
-                // increment the current length and check if there is already a
-                // consecutive pair of the same digits
-                currentLength++;
-                consecutiveCount++;
-                if (consecutiveCount > 1) {
-                    currentLength = 2;
-                    consecutiveCount = 1;
-                }
+        int i = 0, cur = 0, n = s.length();
+        for (int j = 1; j < n; ++j) {
+            cur += s.charAt(j) == s.charAt(j - 1) ? 1 : 0;
+            if (cur > 1) {
+                cur -= s.charAt(++i) == s.charAt(i - 1) ? 1 : 0;
             }
-            
-            // Update the maximum length if necessary
-            maxLength = Math.max(maxLength, currentLength);
         }
-        
-        // Return the maximum length
-        return maxLength;
+        return n - i;
     }
-}
\ No newline at end of file
+}
