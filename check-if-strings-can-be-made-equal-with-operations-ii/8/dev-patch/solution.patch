--- check-if-strings-can-be-made-equal-with-operations-ii/8/src/main/java/com/aprcomp/Solution.java	2023-12-06 21:17:29.869472356 +0200
+++ check-if-strings-can-be-made-equal-with-operations-ii/8/../reference.java	2023-12-21 08:00:53.423051722 +0200
@@ -1,68 +1,21 @@
 package com.aprcomp;
 import java.util.*;
-/**java 
- You are given two strings s1 and s2, both of length n, consisting of lowercase English letters.
-You can apply the following operation on any of the two strings any number of times:
 
-Choose any two indices i and j such that i < j and the difference j - i is even, then swap the two characters at those indices in the string.
-
-Return true if you can make the strings s1 and s2 equal, and false otherwise.
- 
-Example 1:
-
-Input: s1 = "abcdba", s2 = "cabdab"
-Output: true
-Explanation: We can apply the following operations on s1:
-- Choose the indices i = 0, j = 2. The resulting string is s1 = "cbadba".
-- Choose the indices i = 2, j = 4. The resulting string is s1 = "cbbdaa".
-- Choose the indices i = 1, j = 5. The resulting string is s1 = "cabdab" = s2.
-
-Example 2:
-
-Input: s1 = "abe", s2 = "bea"
-Output: false
-Explanation: It is not possible to make the two strings equal.
-
- 
-Constraints:
-
-n == s1.length == s2.length
-1 <= n <= 10 ** 5
-s1 and s2 consist only of lowercase English letters.
-
- **/
-class Solution {
+public class Solution {
     public boolean checkStrings(String s1, String s2) {
-        // Count the frequency of each character in both strings
-        int[] count1 = new int[26];
-        int[] count2 = new int[26];
-        for (int i = 0; i < s1.length(); i++) {
-            count1[s1.charAt(i) - 'a']++;
-            count2[s2.charAt(i) - 'a']++;
-        }
-        
-        // Check if the frequencies of each character are the same in both strings
-        for (int i = 0; i < 26; i++) {
-            if (count1[i] != count2[i]) {
-                return false;
+        int[] odd = new int[26], even = new int[26];
+        for (int i = 0; i < s1.length(); ++i) {
+            if (i % 2 == 1) {
+                odd[s1.charAt(i) - 'a']++;
+                odd[s2.charAt(i) - 'a']--;
+            } else {
+                even[s1.charAt(i) - 'a']++;
+                even[s2.charAt(i) - 'a']--;
             }
         }
-        
-        // Check if the characters at even indices are the same in both strings
-        for (int i = 0; i < s1.length(); i += 2) {
-            if (s1.charAt(i) != s2.charAt(i)) {
-                return false;
-            }
-        }
-        
-        // Check if the characters at odd indices are the same in both strings
-        for (int i = 1; i < s1.length(); i += 2) {
-            if (s1.charAt(i) != s2.charAt(i)) {
-                return false;
-            }
+        for (int i = 0; i < odd.length; ++i) {
+            if (odd[i] != 0 || even[i] != 0) return false;
         }
-        
-        // If all conditions are satisfied, return true
         return true;
     }
-}
\ No newline at end of file
+}
