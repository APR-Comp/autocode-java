--- difference-of-number-of-distinct-values-on-diagonals/7/src/main/java/com/aprcomp/Solution.java	2023-12-06 21:17:30.312809959 +0200
+++ difference-of-number-of-distinct-values-on-diagonals/7/../reference.java	2023-12-21 08:01:08.006512711 +0200
@@ -1,83 +1,24 @@
 package com.aprcomp;
 import java.util.*;
-/**java 
- Given a 0-indexed 2D grid of size m x n, you should find the matrix answer of size m x n.
-The value of each cell (r, c) of the matrix answer is calculated in the following way:
 
-Let topLeft[r][c] be the number of distinct values in the top-left diagonal of the cell (r, c) in the matrix grid.
-Let bottomRight[r][c] be the number of distinct values in the bottom-right diagonal of the cell (r, c) in the matrix grid.
-
-Then answer[r][c] = |topLeft[r][c] - bottomRight[r][c]|.
-Return the matrix answer.
-A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end.
-A cell (r1, c1) belongs to the top-left diagonal of the cell (r, c), if both belong to the same diagonal and r1 < r. Similarly is defined bottom-right diagonal.
- 
-Example 1:
-
-
-
-Input: grid = [[1,2,3],[3,1,5],[3,2,1]]
-Output: [[1,1,0],[1,0,1],[0,1,1]]
-Explanation: The 1 ** st diagram denotes the initial grid. 
-The 2 ** nd diagram denotes a grid for cell (0,0), where blue-colored cells are cells on its bottom-right diagonal.
-The 3 ** rd diagram denotes a grid for cell (1,2), where red-colored cells are cells on its top-left diagonal.
-The 4 ** th diagram denotes a grid for cell (1,1), where blue-colored cells are cells on its bottom-right diagonal and red-colored cells are cells on its top-left diagonal.
-- The cell (0,0) contains [1,1] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |1 - 0| = 1.
-- The cell (1,2) contains [] on its bottom-right diagonal and [2] on its top-left diagonal. The answer is |0 - 1| = 1.
-- The cell (1,1) contains [1] on its bottom-right diagonal and [1] on its top-left diagonal. The answer is |1 - 1| = 0.
-The answers of other cells are similarly calculated.
-
-Example 2:
-
-Input: grid = [[1]]
-Output: [[0]]
-Explanation: - The cell (0,0) contains [] on its bottom-right diagonal and [] on its top-left diagonal. The answer is |0 - 0| = 0.
-
- 
-Constraints:
-
-m == grid.length
-n == grid[i].length
-1 <= m, n, grid[i][j] <= 50
-
- **/
 class Solution {
     public int[][] differenceOfDistinctValues(int[][] grid) {
-        int m = grid.length;
-        int n = grid[0].length;
-        int[][] topLeft = new int[m][n];
-        int[][] bottomRight = new int[m][n];
-        
-        // Calculate topLeft values
-        for (int i = 0; i < m; i++) {
-            for (int j = 0; j < n; j++) {
-                if (i > 0 && j > 0) {
-                    topLeft[i][j] = Math.max(topLeft[i-1][j-1], grid[i][j]);
-                } else {
-                    topLeft[i][j] = grid[i][j];
-                }
-            }
-        }
-        
-        // Calculate bottomRight values
-        for (int i = m-1; i >= 0; i--) {
-            for (int j = n-1; j >= 0; j--) {
-                if (i < m-1 && j < n-1) {
-                    bottomRight[i][j] = Math.max(bottomRight[i+1][j+1], grid[i][j]);
-                } else {
-                    bottomRight[i][j] = grid[i][j];
-                }
+        int[][] res = new int[grid.length][grid[0].length];
+        for(int i=0; i<grid.length; i++){
+            for(int j=0; j<grid[0].length; j++){
+                res[i][j] = answer(grid, i, j);
             }
         }
-        
-        // Calculate answer values
-        int[][] answer = new int[m][n];
-        for (int i = 0; i < m; i++) {
-            for (int j = 0; j < n; j++) {
-                answer[i][j] = Math.abs(topLeft[i][j] - bottomRight[i][j]);
-            }
-        }
-        
-        return answer;
+        return res;
+    }
+    
+    int answer(int[][] grid, int r, int c){
+        Set st1 = new HashSet(), st2 = new HashSet();
+        int r1 = r, c1 = c, r2 = r, c2 = c;
+        while(r1 > 0 && c1 > 0) 
+            st1.add(grid[--r1][--c1]);
+        while(r2 < grid.length-1 && c2 < grid[0].length-1) 
+            st2.add(grid[++r2][++c2]);
+        return Math.abs(st1.size()-st2.size());
     }
 }
\ No newline at end of file
